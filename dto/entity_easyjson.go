// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package dto

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson163c17a9DecodeGithubComBlabuMessagesLibDto(in *jlexer.Lexer, out *ModemState) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "lastPing":
			out.LastPing = int64(in.Int64())
		case "voltage":
			out.Voltage = uint16(in.Uint16())
		case "signal":
			out.Signal = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComBlabuMessagesLibDto(out *jwriter.Writer, in ModemState) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.LastPing != 0 {
		const prefix string = ",\"lastPing\":"
		out.RawString(prefix)
		out.Int64(int64(in.LastPing))
	}
	if in.Voltage != 0 {
		const prefix string = ",\"voltage\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Voltage))
	}
	if in.Signal != 0 {
		const prefix string = ",\"signal\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Signal))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ModemState) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ModemState) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ModemState) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ModemState) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto(l, v)
}
func easyjson163c17a9DecodeGithubComBlabuMessagesLibDto1(in *jlexer.Lexer, out *MessageMetaInf) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "uid":
			out.UID = string(in.String())
		case "contentHash":
			out.ContentHash = string(in.String())
		case "proto":
			out.Proto = uint16(in.Uint16())
		case "cmd":
			out.Command = uint16(in.Uint16())
		case "channel":
			out.Channel = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "addedTime":
			out.AddedTime = int64(in.Int64())
		case "sendedTime":
			out.SendedTime = int64(in.Int64())
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComBlabuMessagesLibDto1(out *jwriter.Writer, in MessageMetaInf) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"uid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"contentHash\":"
		out.RawString(prefix)
		out.String(string(in.ContentHash))
	}
	if in.Proto != 0 {
		const prefix string = ",\"proto\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Proto))
	}
	if in.Command != 0 {
		const prefix string = ",\"cmd\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Command))
	}
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		out.String(string(in.Channel))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"addedTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.AddedTime))
	}
	if in.SendedTime != 0 {
		const prefix string = ",\"sendedTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.SendedTime))
	}
	if in.From != "" {
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	if in.To != "" {
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageMetaInf) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageMetaInf) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageMetaInf) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageMetaInf) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto1(l, v)
}
func easyjson163c17a9DecodeGithubComBlabuMessagesLibDto2(in *jlexer.Lexer, out *MessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "contentType":
			out.ContentType = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "createdDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComBlabuMessagesLibDto2(out *jwriter.Writer, in MessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"contentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"createdDate\":"
		out.RawString(prefix)
		out.Raw((in.CreatedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto2(l, v)
}
func easyjson163c17a9DecodeGithubComBlabuMessagesLibDto3(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hash":
			out.Hash = string(in.String())
		case "contentType":
			out.ContentType = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				out.Data = in.Bytes()
			}
		case "createdDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifDate).UnmarshalJSON(data))
			}
		case "uid":
			out.UID = string(in.String())
		case "contentHash":
			out.ContentHash = string(in.String())
		case "proto":
			out.Proto = uint16(in.Uint16())
		case "cmd":
			out.Command = uint16(in.Uint16())
		case "channel":
			out.Channel = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "addedTime":
			out.AddedTime = int64(in.Int64())
		case "sendedTime":
			out.SendedTime = int64(in.Int64())
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComBlabuMessagesLibDto3(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hash\":"
		out.RawString(prefix[1:])
		out.String(string(in.Hash))
	}
	{
		const prefix string = ",\"contentType\":"
		out.RawString(prefix)
		out.String(string(in.ContentType))
	}
	if len(in.Data) != 0 {
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Data)
	}
	{
		const prefix string = ",\"createdDate\":"
		out.RawString(prefix)
		out.Raw((in.CreatedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifDate).MarshalJSON())
	}
	{
		const prefix string = ",\"uid\":"
		out.RawString(prefix)
		out.String(string(in.UID))
	}
	{
		const prefix string = ",\"contentHash\":"
		out.RawString(prefix)
		out.String(string(in.ContentHash))
	}
	if in.Proto != 0 {
		const prefix string = ",\"proto\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Proto))
	}
	if in.Command != 0 {
		const prefix string = ",\"cmd\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Command))
	}
	if in.Channel != "" {
		const prefix string = ",\"channel\":"
		out.RawString(prefix)
		out.String(string(in.Channel))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"addedTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.AddedTime))
	}
	if in.SendedTime != 0 {
		const prefix string = ",\"sendedTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.SendedTime))
	}
	if in.From != "" {
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	if in.To != "" {
		const prefix string = ",\"to\":"
		out.RawString(prefix)
		out.String(string(in.To))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto3(l, v)
}
func easyjson163c17a9DecodeGithubComBlabuMessagesLibDto4(in *jlexer.Lexer, out *ClientDescriptor) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "image":
			out.ImageURL = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedDate).UnmarshalJSON(data))
			}
		case "activity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComBlabuMessagesLibDto4(out *jwriter.Writer, in ClientDescriptor) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	if true {
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.CreatedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"activity\":"
		out.RawString(prefix)
		out.Raw((in.LastDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ClientDescriptor) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ClientDescriptor) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ClientDescriptor) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ClientDescriptor) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto4(l, v)
}
func easyjson163c17a9DecodeGithubComBlabuMessagesLibDto5(in *jlexer.Lexer, out *Channel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "more":
			out.More = string(in.String())
		case "about":
			out.About = string(in.String())
		case "who":
			out.CreatedBy = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "image":
			out.ImageURL = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedDate).UnmarshalJSON(data))
			}
		case "activity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComBlabuMessagesLibDto5(out *jwriter.Writer, in Channel) {
	out.RawByte('{')
	first := true
	_ = first
	if in.More != "" {
		const prefix string = ",\"more\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.More))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.About))
	}
	if in.CreatedBy != "" {
		const prefix string = ",\"who\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.CreatedBy))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	if true {
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.CreatedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"activity\":"
		out.RawString(prefix)
		out.Raw((in.LastDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Channel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Channel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Channel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Channel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto5(l, v)
}
func easyjson163c17a9DecodeGithubComBlabuMessagesLibDto6(in *jlexer.Lexer, out *Bot) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "who":
			out.CreatedBy = string(in.String())
		case "about":
			out.About = string(in.String())
		case "endpoint":
			out.Endpoint = string(in.String())
		case "health":
			out.HealthCheck = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "token":
			out.Token = string(in.String())
		case "image":
			out.ImageURL = string(in.String())
		case "created":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedDate).UnmarshalJSON(data))
			}
		case "activity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson163c17a9EncodeGithubComBlabuMessagesLibDto6(out *jwriter.Writer, in Bot) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CreatedBy != "" {
		const prefix string = ",\"who\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.CreatedBy))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.About))
	}
	if in.Endpoint != "" {
		const prefix string = ",\"endpoint\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Endpoint))
	}
	if in.HealthCheck != "" {
		const prefix string = ",\"health\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.HealthCheck))
	}
	{
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Token != "" {
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	if in.ImageURL != "" {
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.ImageURL))
	}
	if true {
		const prefix string = ",\"created\":"
		out.RawString(prefix)
		out.Raw((in.CreatedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"activity\":"
		out.RawString(prefix)
		out.Raw((in.LastDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bot) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bot) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson163c17a9EncodeGithubComBlabuMessagesLibDto6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bot) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bot) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson163c17a9DecodeGithubComBlabuMessagesLibDto6(l, v)
}
